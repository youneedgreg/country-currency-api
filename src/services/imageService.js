const Jimp = require('jimp');
const path = require('path');
const fs = require('fs').promises;
const { pool } = require('../models/database');

const IMAGE_PATH = path.join(__dirname, '../../cache/summary.png');

// Generate summary image
const generateSummaryImage = async () => {
  try {
    // Get total countries count
    const [countResult] = await pool.query('SELECT COUNT(*) as count FROM countries');
    const totalCountries = countResult[0].count;
    
    // Get top 5 countries by GDP
    const [topCountries] = await pool.query(
      'SELECT name, estimated_gdp FROM countries WHERE estimated_gdp IS NOT NULL ORDER BY estimated_gdp DESC LIMIT 5'
    );
    
    // Get last refresh timestamp
    const [metadataResult] = await pool.query(
      "SELECT value FROM metadata WHERE key_name = 'last_refreshed_at'"
    );
    const lastRefresh = metadataResult[0]?.value || 'Never';
    
    // Create image (800x600) - Jimp v0.22 syntax
    const image = new Jimp(800, 600, 0xFFFFFFFF);
    
    // Load fonts
    const font = await Jimp.loadFont(Jimp.FONT_SANS_32_BLACK);
    const fontSmall = await Jimp.loadFont(Jimp.FONT_SANS_16_BLACK);
    
    // Add title
    image.print(font, 50, 30, 'Country Currency API - Summary');
    
    // Add total countries
    image.print(fontSmall, 50, 100, `Total Countries: ${totalCountries}`);
    
    // Add last refresh
    const refreshDate = lastRefresh !== 'Never' ? new Date(lastRefresh).toLocaleString() : 'Never';
    image.print(fontSmall, 50, 130, `Last Refreshed: ${refreshDate}`);
    
    // Add top 5 header
    image.print(font, 50, 180, 'Top 5 Countries by GDP:');
    
    // Add top 5 countries
    let yPos = 240;
    topCountries.forEach((country, index) => {
      const gdpFormatted = country.estimated_gdp 
        ? `$${(country.estimated_gdp / 1000000000).toFixed(2)}B`
        : 'N/A';
      const text = `${index + 1}. ${country.name}: ${gdpFormatted}`;
      image.print(fontSmall, 70, yPos, text);
      yPos += 40;
    });
    
    // Add footer
    image.print(fontSmall, 50, 520, 'Generated by Country Currency API');
    
    // Ensure cache directory exists
    const cacheDir = path.join(__dirname, '../../cache');
    try {
      await fs.access(cacheDir);
    } catch {
      await fs.mkdir(cacheDir, { recursive: true });
    }
    
    // Save image
    await image.writeAsync(IMAGE_PATH);
    
    console.log('✅ Summary image generated successfully');
    return true;
  } catch (error) {
    console.error('❌ Error generating image:', error.message);
    throw error;
  }
};

// Check if image exists
const imageExists = async () => {
  try {
    await fs.access(IMAGE_PATH);
    return true;
  } catch {
    return false;
  }
};

// Get image path
const getImagePath = () => {
  return IMAGE_PATH;
};

module.exports = {
  generateSummaryImage,
  imageExists,
  getImagePath
};